{"version":3,"sources":["containers/TicTacToe/constants.js","containers/TicTacToe/Styled.js","containers/StyleConstants.js","containers/TicTacToe/utils.js","containers/TicTacToe/selectors.js","containers/TicTacToe/actions.js","containers/TicTacToe/components/Circle/Styled.js","containers/TicTacToe/components/Circle/index.js","containers/TicTacToe/components/Cross/Styled.js","containers/TicTacToe/components/Cross/index.js","containers/TicTacToe/components/Selection/index.js","containers/TicTacToe/components/ToggleSwitchBtn/Styled.js","containers/TicTacToe/components/ToggleSwitchBtn/index.js","containers/TicTacToe/components/InfoBoard/Styled.js","utils/tracking.js","containers/TicTacToe/components/InfoBoard/index.js","containers/TicTacToe/index.js","App.js","registerServiceWorker.js","utils/history.js","containers/TicTacToe/reducer.js","containers/TicTacToe/epics.js","store/epics.js","store/index.js","store/configureStore.js","store/reducers.js","index.js"],"names":["INIT","concat","SET_BLOCK_VALUE","SET_GAME_SCALE","SET_WINNER_CONDITION","SET_WINNER","SET_IS_SINGLE_PLAYER","TOGGLE","winnerBackground","keyframes","_templateObject","crossMixin","gameScale","angle","StyledTicTacToe","styled","div","_templateObject2","props","_","require","getWinCase","blocks","arrs","winnerCondition","result","blockId","forEach","arr","winCaseArr","prevPlayer","getIn","currentPlayer","element","push","length","Object","toConsumableArray","getWinner","winner","isGameFinished","range","map","item","rowCheck","colCheck","firstHeaders","secondHeaders","firstArr","header","index","secondArr","forwardSlashCheck","sort","a","b","backSlashCheck","apply","find","block","undefined","get","selectTicTacToe","state","setBlockValue","id","type","payload","setWinner","isWin","StyledCircle","Styled_templateObject","theme","scaleFactor","Circle","_ref","react_default","createElement","className","defaultProps","StyledCross","Cross_Styled_templateObject","Cross","Selection","options","handleOnSelect","onChange","option","key","value","StyledToggleSwitchBtn","ToggleSwitchBtn_Styled_templateObject","isSinglePlay","ToggleSwitchBtn","handleOnToggleSwitchClick","circleStyle","onClick","StyledInfoBoard","InfoBoard_Styled_templateObject","dataLayer","window","gtag","arguments","Date","showContent","components_Circle","components_Cross","InfoBoard","currentRole","role","event_category","event_label","toJS","blockStyle","winCaseArrs","isWinnerBlock","size","includes","TicTacToe","handleOnClick","event","_this$props","_this","handleOnBlockClicked","currentTarget","getAttribute","handleOnGameScaleSelected","handleOnSetGameScale","parseInt","target","handleOnWinnerConditionSelected","handleOnSetWinnerCondition","_this$props2","handleOnSetIsSinglePlay","handleOnRestartClick","handleOnRestartGame","_this2","this","_this$props3","winnerConditionOptions","gameScaleOptions","components_InfoBoard","data-id","components_Selection","components_ToggleSwitchBtn","React","Component","List","Map","mapStateToProps","createStructuredSelector","createSelector","tictactoeState","fromJS","connect","dispatch","App","containers_TicTacToe","GithubCorner_default","bannerColor","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","history","createHistory","initialState","isSinglePlayer","setInit","initBlocks","Array","from","owner","set","tictactoeReducer","action","setIn","updatedState","updateIn","epics","action$","store","ofType","switchMap","Observable","of","debounceTime","enableBlocks","filter","Math","floor","random","getBlockId","empty","store_epics","tictoctoeEpics","epic$","BehaviorSubject","combineEpics","initialEpics","epicMiddleware","createEpicMiddleware","middlewares","enhancers","applyMiddleware","composeEnhancers","compose","createStore","combineReducers","tictactoe","run","deps","mergeMap","epic","err","source$","setTimeout","configureStore","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3904b812.chunk.js","sourcesContent":["export const KEY_REDUCER = 'TICTACTOE';\r\n\r\nexport const INIT = `${KEY_REDUCER}/INIT`;\r\nexport const SET_BLOCK_VALUE = `${KEY_REDUCER}/SET_BLOCK_VALUE`;\r\nexport const SET_GAME_SCALE = `${KEY_REDUCER}/SET_GAME_SCALE`;\r\nexport const SET_WINNER_CONDITION = `${KEY_REDUCER}/SET_WINNER_CONDITION`;\r\nexport const SET_WINNER = `${KEY_REDUCER}/SET_WINNER`;\r\nexport const SET_IS_SINGLE_PLAYER = `${KEY_REDUCER}/SET_IS_SINGLE_PLAYER`;\r\n\r\nexport const CIRCLE = 1;\r\nexport const CROSS = -1;\r\nexport const TOGGLE = -1;\r\nexport const PLAYER_1 = CIRCLE;\r\n\r\nexport const GAME_WRAPPER_SIZE = 600;\r\nexport const DEFAULT_GAME_SCALE = 3;\r\nexport const DEFAULT_WINNER_CONDITION = 3;\r\n","import styled, {keyframes} from 'styled-components';\r\nimport {\r\n    THEME,\r\n    THEME_DARKEN,\r\n    BACKGROUND_COLOR,\r\n} from '../StyleConstants';\r\nimport {\r\n    GAME_WRAPPER_SIZE,\r\n} from './constants';\r\n\r\nconst winnerBackground = keyframes`\r\n    from {\r\n        background: ${THEME_DARKEN};\r\n    }\r\n\r\n    to {\r\n        background: ${THEME};\r\n    }\r\n`;\r\n\r\nconst crossMixin = (gameScale, angle) => `\r\n    content: '';\r\n    border-radius: 10px;\r\n    width: 110%;\r\n    background: black;\r\n    position: absolute;\r\n    height: ${ 4.5 / gameScale }em;\r\n    transform: rotate(${angle}deg);\r\n`;\r\n\r\nexport const StyledTicTacToe = styled.div`\r\n    .tic-tac-toe__blocks-wrapper {\r\n        width: ${GAME_WRAPPER_SIZE}px;\r\n        height: ${GAME_WRAPPER_SIZE}px;\r\n        @media only screen and (max-width: 600px) {\r\n            width: calc(100vw - 20px);\r\n            height: calc(100vw - 20px);\r\n        }\r\n        display: grid;\r\n        ${(props) => {\r\n    const gameScale = props.gameScale;\r\n    return `\r\n                grid-template-columns: repeat(${gameScale}, 1fr);\r\n                grid-template-rows: repeat(${gameScale}, 1fr);\r\n                grid-gap: ${45 / gameScale}px ${45 / gameScale}px;\r\n            `;\r\n}}\r\n    }\r\n    .tic-tac-toe__item {\r\n        outline: none;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        color: white;\r\n        width: 100%;\r\n        height: 100%;\r\n\r\n        background: ${THEME};\r\n        cursor: pointer;\r\n        &:hover {\r\n            background: ${THEME_DARKEN};\r\n        }\r\n    }\r\n    .tic-tac-toe__item-win {\r\n        animation: ${winnerBackground} 0.5s linear infinite alternate;\r\n    }\r\n    .tic-tac-toe__cross-wrapper {\r\n        height: 80%;\r\n        width: 80%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        .cross {\r\n            position: relative;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            &:before {\r\n                ${(props) => {\r\n    const gameScale = props.gameScale;\r\n    return crossMixin(gameScale, 45);\r\n}}\r\n            }\r\n            &:after {\r\n                ${(props) => {\r\n    const gameScale = props.gameScale;\r\n    return crossMixin(gameScale, -45);\r\n}}\r\n            }\r\n        }\r\n    }\r\n    \r\n    .tic-tac-toe__restart-btn {\r\n        font-family: 'Rammetto One', cursive;\r\n        width: 100%;\r\n        line-height: 50px;\r\n        font-size: 1.5em;\r\n        letter-spacing: 1px;\r\n        background: white;\r\n        cursor: pointer;\r\n        outline: none;\r\n        margin: 10px 0;\r\n        padding: 5px 0;\r\n        border-radius: 5px;\r\n        border: none;\r\n        transition: all 0.25s ease-out;\r\n        &:hover {\r\n            box-shadow: 0 10px 20px 0 ${BACKGROUND_COLOR};\r\n            transform: translateY(-1px);\r\n            color: ${THEME_DARKEN};\r\n        }\r\n    }\r\n    .tic-tac-toe__setting-group-wrapper {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, 1fr);\r\n        grid-template-rows: repeat(2, 40px);\r\n        justify-content: space-between;\r\n        font-family: 'Rammetto One', cursive;\r\n        margin-bottom: 10px;\r\n    }\r\n    .tic-tac-toe__setting-group {\r\n        display: flex;\r\n        align-items: center;\r\n        text-shadow: 2px 0px white;\r\n        font-size: 1.2em;\r\n        @media only screen and (max-width: 600px) {\r\n            font-size: 0.9em;\r\n        }\r\n        span {\r\n            margin-right: 5px;\r\n        }\r\n        select {\r\n            font-size: 1.2em;\r\n            outline: none;\r\n            background: white;\r\n        }\r\n    }\r\n`;\r\n","export const THEME = '#ff99ab';\r\nexport const THEME_DARKEN = '#ff4f6e';\r\nexport const BACKGROUND_COLOR = '#e2a900';","import {\r\n    CIRCLE,\r\n    CROSS,\r\n} from './constants';\r\n\r\nconst _ = require('lodash');\r\n\r\nconst getWinCase = (blocks, arrs, winnerCondition) => {\r\n    let result = {};\r\n    result[CIRCLE] = [];\r\n    result[CROSS] = [];\r\n    let blockId = 0;\r\n\r\n    arrs.forEach((arr) => {\r\n        let winCaseArr = [];\r\n        let prevPlayer = blocks.getIn([blockId, 'owner']);\r\n        let currentPlayer = blocks.getIn([blockId, 'owner']);\r\n        let isContinuous;\r\n        arr.forEach((element) => {\r\n            blockId = element;\r\n            currentPlayer = blocks.getIn([blockId, 'owner']);\r\n            isContinuous = (prevPlayer === currentPlayer);\r\n            if (isContinuous) {\r\n                if (currentPlayer) {\r\n                    winCaseArr.push(blocks.getIn([blockId, 'id']));\r\n                } else {\r\n                    winCaseArr = [];\r\n                }\r\n            } else {\r\n                if (currentPlayer) {\r\n                    if (prevPlayer && (winCaseArr.length >= winnerCondition)) {\r\n                        result[prevPlayer].push([...winCaseArr]);\r\n                    }\r\n                    winCaseArr = [];\r\n                    winCaseArr.push(blocks.getIn([blockId, 'id']));\r\n                    prevPlayer = currentPlayer;\r\n                } else {\r\n                    if (prevPlayer && (winCaseArr.length >= winnerCondition)) {\r\n                        result[prevPlayer].push([...winCaseArr]);\r\n                    }\r\n                    winCaseArr = [];\r\n                    prevPlayer = currentPlayer;\r\n                }\r\n            }\r\n        });\r\n        if (winCaseArr.length >= winnerCondition) {\r\n            result[currentPlayer].push([...winCaseArr]);\r\n        }\r\n    });\r\n    return result;\r\n};\r\n\r\nconst rowCheck = (blocks, gameScale, winnerCondition) => {\r\n    const arrs = _.range(0, gameScale)\r\n        .map((item) => {\r\n            return _.range(item * gameScale, (item + 1) * gameScale);\r\n        });\r\n    return getWinCase(blocks, arrs, winnerCondition);\r\n};\r\n\r\nconst colCheck = (blocks, gameScale, winnerCondition) => {\r\n    const arrs = _.range(0, gameScale)\r\n        .map((item) => {\r\n            return _.range(item, item + gameScale * (gameScale - 1) + 1, gameScale);\r\n        });\r\n    return getWinCase(blocks, arrs, winnerCondition);\r\n};\r\n\r\nconst forwardSlashCheck = (blocks, gameScale, winnerCondition) => { /* / */\r\n    const firstHeaders = _.range(0, gameScale);\r\n    const secondHeaders = _.range(gameScale * 2 - 1, gameScale * gameScale, gameScale);\r\n    const firstArr = firstHeaders.map((header, index) => (\r\n        _.range(header, index * gameScale + 1, gameScale - 1)\r\n    ));\r\n    const secondArr = secondHeaders.map((header, index) => (\r\n        _.range(header, header + (secondHeaders.length - index) * (gameScale - 1), gameScale - 1)\r\n    ));\r\n    const arrs = [...firstArr, ...secondArr];\r\n    return getWinCase(blocks, arrs, winnerCondition);\r\n};\r\n\r\nconst backSlashCheck = (blocks, gameScale, winnerCondition) => { /* \\ */\r\n    const firstHeaders = _.range(0, gameScale).sort((a, b) => b - a);\r\n    const secondHeaders = _.range(gameScale, gameScale * (gameScale - 1) + 1, gameScale);\r\n    const firstArr = firstHeaders.map((header, index) => (\r\n        _.range(header, (index + 1) * gameScale, gameScale + 1)\r\n    ));\r\n    const secondArr = secondHeaders.map((header, index) => (\r\n        _.range(header, header + (secondHeaders.length - index) * (gameScale + 1), gameScale + 1)\r\n    ));\r\n    const arrs = [...firstArr, ...secondArr];\r\n    return getWinCase(blocks, arrs, winnerCondition);\r\n};\r\n\r\nexport const getWinner = (blocks, gameScale, winnerCondition) => {\r\n    let winner;\r\n    let winCaseArr = [];\r\n    let isGameFinished = false;\r\n    const rowResult = rowCheck(blocks, gameScale, winnerCondition);\r\n    const colResult = colCheck(blocks, gameScale, winnerCondition);\r\n    const forwardSlashResult = forwardSlashCheck(blocks, gameScale, winnerCondition);\r\n    const backSlashResult = backSlashCheck(blocks, gameScale, winnerCondition);\r\n    const results = [rowResult, colResult, forwardSlashResult, backSlashResult];\r\n    results.forEach((result) => {\r\n        if (result[CIRCLE].length) {\r\n            winCaseArr.push(...result[CIRCLE]);\r\n            winner = CIRCLE;\r\n            isGameFinished = true;\r\n        }\r\n        if (result[CROSS].length) {\r\n            winCaseArr.push(...result[CROSS]);\r\n            winner = CROSS;\r\n            isGameFinished = true;\r\n        }\r\n    });\r\n    if (!blocks.find((block) => block.get('owner') === undefined)) {\r\n        isGameFinished = true;\r\n    }\r\n    return {\r\n        winner,\r\n        winCaseArr,\r\n        isGameFinished,\r\n    };\r\n};\r\n\r\nexport const getBlockId = blocks => {\r\n    const enableBlocks = blocks.filter(block => block.get('owner') === undefined);\r\n    const choosedId = enableBlocks\r\n        .get(Math.floor(Math.random() * enableBlocks.size))\r\n        .get('id');\r\n    return choosedId;\r\n};\r\n","import {createSelector} from 'reselect';\r\nimport {fromJS} from 'immutable';\r\nimport {getWinner} from './utils';\r\n\r\nimport {\r\n    DEFAULT_GAME_SCALE,\r\n    DEFAULT_WINNER_CONDITION,\r\n} from './constants';\r\nimport _ from 'lodash';\r\n\r\nconst selectTicTacToe = state => state.get('tictactoe');\r\n\r\nconst makeSelectGameScale = () =>\r\n    createSelector(selectTicTacToe, tictactoeState =>\r\n        tictactoeState.get('gameScale'),\r\n    );\r\n\r\nconst makeSelectBlocks = () =>\r\n    createSelector(selectTicTacToe, tictactoeState =>\r\n        tictactoeState.get('blocks'),\r\n    );\r\n\r\nconst makeSelectCurrentRole = () =>\r\n    createSelector(selectTicTacToe, tictactoeState =>\r\n        tictactoeState.get('currentRole'),\r\n    );\r\n\r\nconst makeSelectIsWin = () =>\r\n    createSelector(selectTicTacToe, tictactoeState => {\r\n        const blocks = tictactoeState.get('blocks');\r\n        const winnerCondition = tictactoeState.get('winnerCondition');\r\n        const gameScale = tictactoeState.get('gameScale');\r\n        const isWin = getWinner(blocks, gameScale, winnerCondition);\r\n        return fromJS(isWin);\r\n    });\r\n\r\nconst makeSelectIsSinglePlayer = () =>\r\n    createSelector(selectTicTacToe, tictactoeState =>\r\n        tictactoeState.get('isSinglePlayer'),\r\n    );\r\n\r\nconst makeSelectGameScaleOptions = () =>\r\n    createSelector(selectTicTacToe, tictactoeState => {\r\n        const options = _.range(DEFAULT_GAME_SCALE, 20 + 1);\r\n        return options;\r\n    });\r\n\r\nconst makeSelectWinnerConditionOptions = () =>\r\n    createSelector(selectTicTacToe, tictactoeState => {\r\n        const gameScale = tictactoeState.get('gameScale');\r\n        const options = _.range(DEFAULT_WINNER_CONDITION, gameScale + 1);\r\n        return options;\r\n    });\r\n\r\nexport {\r\n    makeSelectGameScale,\r\n    makeSelectBlocks,\r\n    makeSelectCurrentRole,\r\n    makeSelectIsWin,\r\n    makeSelectIsSinglePlayer,\r\n    makeSelectGameScaleOptions,\r\n    makeSelectWinnerConditionOptions,\r\n};\r\n","import {\r\n    INIT,\r\n    SET_BLOCK_VALUE,\r\n    SET_GAME_SCALE,\r\n    SET_WINNER_CONDITION,\r\n    SET_WINNER,\r\n    SET_IS_SINGLE_PLAYER,\r\n} from './constants';\r\n\r\nexport const setInit = () => ({\r\n    type: INIT,\r\n});\r\n\r\nexport const setBlockValue = (id) => ({\r\n    type: SET_BLOCK_VALUE,\r\n    payload: id,\r\n});\r\n\r\nexport const setGameScale = (payload) => ({\r\n    type: SET_GAME_SCALE,\r\n    payload,\r\n});\r\n\r\nexport const setWinnerCondition = (payload) => ({\r\n    type: SET_WINNER_CONDITION,\r\n    payload,\r\n});\r\n\r\nexport const setWinner = (isWin) => ({\r\n    type: SET_WINNER,\r\n    payload: isWin,\r\n});\r\n\r\nexport const setIsSinglePlayer = () => ({\r\n    type: SET_IS_SINGLE_PLAYER,\r\n});\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCircle = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 80%;\r\n    width: 80%;\r\n    .circle__circle {\r\n        width: 100%;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n        border-radius: 100%;\r\n        ${(props) => {\r\n    return `\r\n                border: ${ 4.5 / props.theme.scaleFactor }em solid white;\r\n            `;\r\n}}\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    StyledCircle,\r\n} from './Styled';\r\n\r\nconst Circle = ({theme}) => (\r\n    <StyledCircle theme={theme}>\r\n        <span className=\"circle__circle\"/>\r\n    </StyledCircle>\r\n);\r\n\r\nCircle.propTypes = {\r\n    theme: PropTypes.object,\r\n    handleOnToggleSwitchClick: PropTypes.func,\r\n};\r\n\r\nCircle.defaultProps = {\r\n    theme: null,\r\n};\r\n\r\nexport default Circle;\r\n","import styled from 'styled-components';\r\n\r\nconst crossMixin = (scaleFactor, angle) => `\r\n    content: '';\r\n    border-radius: 10px;\r\n    width: 110%;\r\n    background: black;\r\n    position: absolute;\r\n    height: ${ 4.5 / scaleFactor }em;\r\n    transform: rotate(${angle}deg);\r\n`;\r\n\r\nexport const StyledCross = styled.div`\r\n    width: 80%;\r\n    height: 80%;\r\n    .cross__cross {\r\n        position: relative;\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        &:before {\r\n            ${(props) => {\r\n    return crossMixin(props.theme.scaleFactor, 45);\r\n}}\r\n        }\r\n        &:after {\r\n            ${(props) => {\r\n    return crossMixin(props.theme.scaleFactor, -45);\r\n}}\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    StyledCross,\r\n} from './Styled';\r\n\r\nconst Cross = ({theme}) => (\r\n    <StyledCross theme={theme}>\r\n        <span className=\"cross__cross\"/>\r\n    </StyledCross>\r\n);\r\n\r\nCross.propTypes = {\r\n    theme: PropTypes.object,\r\n    handleOnToggleSwitchClick: PropTypes.func,\r\n};\r\n\r\nCross.defaultProps = {\r\n    theme: null,\r\n};\r\n\r\nexport default Cross;\r\n","import React from 'react';\r\n\r\nconst Selection = ({options, handleOnSelect}) => (\r\n    <select onChange={handleOnSelect}>\r\n        {\r\n            options.map((option) => (\r\n                <option\r\n                    key={option}\r\n                    value={option}\r\n                >\r\n                    {option}\r\n                </option>\r\n            ))\r\n        }\r\n    </select>\r\n);\r\n\r\nexport default Selection;\r\n","import styled from 'styled-components';\r\nimport {\r\n    THEME_DARKEN,\r\n} from '../../../StyleConstants';\r\n\r\nexport const StyledToggleSwitchBtn = styled.div`\r\n    .tic-tac-toe__toggle-switch-btn-container {\r\n        position: relative;\r\n        width: 50px;\r\n        height: 25px;\r\n        border-radius: 20px;\r\n        padding: 4px;\r\n        cursor: pointer;\r\n        border: 2px solid white;\r\n        transition: all 0.15s ease-out;        \r\n        ${(props) => {\r\n    return props.isSinglePlay ?\r\n        `background: ${THEME_DARKEN};` : `background: #878787;`;\r\n}}\r\n    }\r\n    .tic-tac-toe__toggle-switch-btn-circle {\r\n        position: relative;\r\n        width: 50%;\r\n        height: 100%;\r\n        background: white;\r\n        top: 50%;\r\n        transform: translateY(-50%) translateX(100%);\r\n        border-radius: 100%;\r\n        right: 0px;\r\n        transition: all 0.15s ease-out;\r\n    }\r\n    .tic-tac-toe__toggle-switch-btn-circle-left {\r\n        position: relative;\r\n        width: 50%;\r\n        height: 100%;\r\n        background: white;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        border-radius: 100%;\r\n        right: 0px;\r\n        transition: all 0.15s ease-out;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    StyledToggleSwitchBtn,\r\n} from './Styled';\r\n\r\nconst ToggleSwitchBtn = ({isSinglePlay, handleOnToggleSwitchClick}) => {\r\n    const circleStyle = isSinglePlay ?\r\n        'tic-tac-toe__toggle-switch-btn-circle' : 'tic-tac-toe__toggle-switch-btn-circle-left';\r\n    return (\r\n        <StyledToggleSwitchBtn isSinglePlay={isSinglePlay} onClick={handleOnToggleSwitchClick}>\r\n            <div className=\"tic-tac-toe__toggle-switch-btn-container\">\r\n                <div className={circleStyle}/>\r\n            </div>\r\n        </StyledToggleSwitchBtn>\r\n    )\r\n};\r\n\r\nToggleSwitchBtn.propTypes = {\r\n    isSinglePlay: PropTypes.bool,\r\n    handleOnToggleSwitchClick: PropTypes.func,\r\n};\r\n\r\nToggleSwitchBtn.defaultProps = {\r\n    isSinglePlay: true,\r\n    handleOnToggleSwitchClick: () => {\r\n    },\r\n};\r\n\r\nexport default ToggleSwitchBtn;\r\n","import styled from 'styled-components';\r\n\r\nconst SIZE = 100;\r\n\r\nexport const StyledInfoBoard = styled.div`\r\n    height: ${SIZE}px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: #ffffff5e;\r\n    margin: 10px 0px;\r\n    font-weight: 900;\r\n    text-shadow: 2px 0px white;\r\n    .info-board__content-wrapper {\r\n        height: ${SIZE}px;\r\n        width: ${SIZE}px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n    .info-board__label {\r\n        font-size: 3em;\r\n        @media only screen and (max-width: 600px) {\r\n            font-size: 2em;\r\n        }\r\n        letter-spacing: 15px;\r\n        margin: 0px 20px;\r\n    }\r\n`;\r\n","let dataLayer = window.dataLayer || [];\r\n\r\nfunction gtag() {\r\n    dataLayer.push(arguments);\r\n}\r\n\r\ngtag('js', new Date());\r\ngtag('config', 'UA-71624765-2');\r\n\r\nexport default gtag;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Circle from '../Circle';\r\nimport Cross from '../Cross';\r\nimport {\r\n    CIRCLE,\r\n    CROSS,\r\n    PLAYER_1,\r\n} from '../../constants';\r\nimport {\r\n    StyledInfoBoard,\r\n} from './Styled';\r\nimport gtag from '../../../../utils/tracking';\r\n\r\nconst showContent = (value) => {\r\n    const theme = {\r\n        scaleFactor: 5,\r\n    };\r\n    if (value === CIRCLE) {\r\n        return <Circle theme={theme}/>\r\n    } else if (value === CROSS) {\r\n        return <Cross theme={theme}/>\r\n    }\r\n    return null;\r\n};\r\n\r\nconst InfoBoard = ({currentRole, isWin}) => {\r\n    if (isWin.get('isGameFinished')) {\r\n        if (isWin.get('winner')) {\r\n            const role = isWin.get('winner') === CIRCLE ? 'CIRCLE' : 'CROSS';\r\n            gtag('event', 'InfoBoard', {\r\n                'event_category': `${role} win`,\r\n                'event_label': isWin.get('winCaseArr').toJS(),\r\n            });\r\n            return (\r\n                <StyledInfoBoard>\r\n                    <span className=\"info-board__label\">获胜者是</span>\r\n                    <div className=\"info-board__content-wrapper\">\r\n                        {showContent(isWin.get('winner'))}\r\n                    </div>\r\n                </StyledInfoBoard>\r\n            );\r\n        }\r\n        gtag('event', 'InfoBoard', {\r\n            'event_category': '平手',\r\n            'event_label': isWin.get('winCaseArr').toJS(),\r\n        });\r\n        return (\r\n            <StyledInfoBoard>\r\n                <span className=\"info-board__label\">平手</span>\r\n            </StyledInfoBoard>\r\n        );\r\n    }\r\n    return (\r\n        <StyledInfoBoard>\r\n            <span className=\"info-board__label\">轮到</span>\r\n            <div className=\"info-board__content-wrapper\">\r\n                {showContent(currentRole)}\r\n            </div>\r\n        </StyledInfoBoard>\r\n    );\r\n};\r\n\r\nInfoBoard.propTypes = {\r\n    currentRole: PropTypes.number,\r\n    isWin: PropTypes.object,\r\n};\r\n\r\nInfoBoard.defaultProps = {\r\n    currentRole: PLAYER_1,\r\n    isWin: null,\r\n};\r\n\r\nexport default InfoBoard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {List, Map} from 'immutable';\r\nimport _ from 'lodash';\r\n\r\nimport {\r\n    DEFAULT_GAME_SCALE,\r\n} from './constants';\r\n\r\nimport {StyledTicTacToe} from './Styled';\r\nimport {\r\n    makeSelectGameScale,\r\n    makeSelectBlocks,\r\n    makeSelectCurrentRole,\r\n    makeSelectIsWin,\r\n    makeSelectIsSinglePlayer,\r\n    makeSelectGameScaleOptions,\r\n    makeSelectWinnerConditionOptions,\r\n} from './selectors';\r\nimport {\r\n    setBlockValue,\r\n    setInit,\r\n    setGameScale,\r\n    setWinnerCondition,\r\n    setIsSinglePlayer,\r\n} from './actions';\r\nimport {\r\n    CIRCLE,\r\n    CROSS,\r\n} from './constants';\r\n\r\nimport Circle from './components/Circle';\r\nimport Cross from './components/Cross';\r\nimport Selection from './components/Selection';\r\nimport ToggleSwitchBtn from './components/ToggleSwitchBtn';\r\nimport InfoBoard from './components/InfoBoard';\r\nimport gtag from '../../utils/tracking';\r\n\r\nconst showContent = (value, gameScale) => {\r\n    const theme = {\r\n        scaleFactor: gameScale,\r\n    };\r\n    if (value === CIRCLE) {\r\n        return <Circle theme={theme}/>\r\n    } else if (value === CROSS) {\r\n        return <Cross theme={theme}/>\r\n    }\r\n    return null;\r\n};\r\n\r\nconst blockStyle = (id, winCaseArrs) => {\r\n    let isWinnerBlock = false;\r\n    if (winCaseArrs.size) {\r\n        winCaseArrs.forEach((winCaseArr) => {\r\n            if (winCaseArr.includes(id)) {\r\n                isWinnerBlock = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (isWinnerBlock) {\r\n        return 'tic-tac-toe__item tic-tac-toe__item-win';\r\n    }\r\n    return 'tic-tac-toe__item';\r\n};\r\n\r\nclass TicTacToe extends React.Component {\r\n    static propTypes = {\r\n        gameScale: PropTypes.number,\r\n        blocks: PropTypes.instanceOf(List),\r\n        currentRole: PropTypes.number,\r\n        isWin: PropTypes.instanceOf(Map),\r\n        isSinglePlay: PropTypes.bool,\r\n        gameScaleOptions: PropTypes.array,\r\n        winnerConditionOptions: PropTypes.array,\r\n        handleOnBlockClicked: PropTypes.func,\r\n        handleOnRestartGame: PropTypes.func,\r\n        handleOnSetGameScale: PropTypes.func,\r\n        handleOnSetWinnerCondition: PropTypes.func,\r\n        handleOnSetIsSinglePlay: PropTypes.func,\r\n    };\r\n    static defaultProps = {\r\n        gameScale: DEFAULT_GAME_SCALE,\r\n        blocks: List(),\r\n        currentRole: 0,\r\n        isWin: Map(),\r\n        isSinglePlay: true,\r\n        gameScaleOptions: [],\r\n        winnerConditionOptions: [],\r\n        handleOnBlockClicked: () => {\r\n        },\r\n        handleOnRestartGame: () => {\r\n        },\r\n        handleOnSetGameScale: () => {\r\n        },\r\n        handleOnSetWinnerCondition: () => {\r\n        },\r\n        handleOnSetIsSinglePlay: () => {\r\n        },\r\n    };\r\n    handleOnClick = (event) => {\r\n        const {blocks, handleOnBlockClicked} = this.props;\r\n        const id = event.currentTarget.getAttribute('data-id');\r\n        if (!blocks.getIn([id, 'owner'])) {\r\n            gtag('event', 'onClick Block', {\r\n                'event_category': 'id',\r\n                'event_label': id,\r\n            });\r\n            handleOnBlockClicked(id);\r\n        }\r\n    };\r\n    handleOnGameScaleSelected = (event) => {\r\n        const {handleOnSetGameScale} = this.props;\r\n        const gameScale = parseInt(event.target.value, 10);\r\n        gtag('event', 'Selection', {\r\n            'event_category': 'gameScale',\r\n            'event_label': gameScale,\r\n        });\r\n        handleOnSetGameScale(gameScale);\r\n    };\r\n    handleOnWinnerConditionSelected = (event) => {\r\n        const {handleOnSetWinnerCondition} = this.props;\r\n        const winnerCondition = parseInt(event.target.value, 10);\r\n        gtag('event', 'Selection', {\r\n            'event_category': 'winnerCondition',\r\n            'event_label': winnerCondition,\r\n        });\r\n        handleOnSetWinnerCondition(winnerCondition);\r\n    };\r\n    handleOnToggleSwitchClick = () => {\r\n        const {\r\n            isSinglePlay,\r\n            handleOnSetIsSinglePlay,\r\n        } = this.props;\r\n        gtag('event', 'ToggleSwitch', {\r\n            'event_category': 'isSinglePlay',\r\n            'event_label': !isSinglePlay,\r\n        });\r\n        handleOnSetIsSinglePlay();\r\n    };\r\n    handleOnRestartClick = () => {\r\n        const {\r\n            handleOnRestartGame,\r\n        } = this.props;\r\n        gtag('event', 'restart');\r\n        handleOnRestartGame();\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            gameScale,\r\n            blocks,\r\n            isWin,\r\n            isSinglePlay,\r\n            currentRole,\r\n            winnerConditionOptions,\r\n        } = this.props;\r\n        const gameScaleOptions = _.range(DEFAULT_GAME_SCALE, 20 + 1);\r\n\r\n        return (\r\n            <StyledTicTacToe gameScale={gameScale}>\r\n                <InfoBoard currentRole={currentRole} isWin={isWin}/>\r\n                <div className=\"tic-tac-toe__blocks-wrapper\">\r\n                    {\r\n                        blocks.map((block) => (\r\n                            <div\r\n                                key={block.get('id')}\r\n                                data-id={block.get('id')}\r\n                                className={blockStyle(block.get('id'), isWin.get('winCaseArr'))}\r\n                                onClick={isWin.get('isGameFinished') ? () => {\r\n                                } : this.handleOnClick}\r\n                            >\r\n                                {showContent(block.get('owner'), gameScale)}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <button\r\n                    className=\"tic-tac-toe__restart-btn\"\r\n                    onClick={this.handleOnRestartClick}\r\n                >\r\n                    Restart\r\n                </button>\r\n                <div className=\"tic-tac-toe__setting-group-wrapper\">\r\n                    <div className=\"tic-tac-toe__setting-group\">\r\n                        <span>Scale</span>\r\n                        <Selection options={gameScaleOptions} handleOnSelect={this.handleOnGameScaleSelected}/>\r\n                    </div>\r\n                    <div className=\"tic-tac-toe__setting-group\">\r\n                        <span>Condition</span>\r\n                        <Selection options={winnerConditionOptions}\r\n                                   handleOnSelect={this.handleOnWinnerConditionSelected}/>\r\n                    </div>\r\n                    <div className=\"tic-tac-toe__setting-group\">\r\n                        <span>Single Play</span>\r\n                        <ToggleSwitchBtn isSinglePlay={isSinglePlay}\r\n                                         handleOnToggleSwitchClick={this.handleOnToggleSwitchClick}/>\r\n                    </div>\r\n                </div>\r\n            </StyledTicTacToe>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    gameScale: makeSelectGameScale(),\r\n    blocks: makeSelectBlocks(),\r\n    currentRole: makeSelectCurrentRole(),\r\n    isWin: makeSelectIsWin(),\r\n    isSinglePlay: makeSelectIsSinglePlayer(),\r\n    gameScaleOptions: makeSelectGameScaleOptions(),\r\n    winnerConditionOptions: makeSelectWinnerConditionOptions(),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    handleOnBlockClicked: (id) =>\r\n        dispatch(setBlockValue(id)),\r\n    handleOnRestartGame: () => dispatch(setInit()),\r\n    handleOnSetGameScale: (gameScale) => dispatch(setGameScale(gameScale)),\r\n    handleOnSetWinnerCondition: (winnerCondition) => dispatch(setWinnerCondition(winnerCondition)),\r\n    handleOnSetIsSinglePlay: () => dispatch(setIsSinglePlayer()),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(TicTacToe);\r\n","import React, {Component} from 'react';\r\nimport TicTacToe from './containers/TicTacToe';\r\nimport GithubCorner from 'react-github-corner';\r\nimport {\r\n    THEME_DARKEN,\r\n} from './containers/StyleConstants';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <TicTacToe/>\r\n                <GithubCorner size={80} bannerColor={THEME_DARKEN} href=\"https://github.com/whjin/make-react-game\"\r\n                              target=\"_blank\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import createHistory from 'history/createBrowserHistory';\r\n\r\nconst history = createHistory();\r\n\r\nexport default history;\r\n","import {fromJS} from 'immutable';\r\nimport {getWinner} from './utils';\r\nimport {\r\n    INIT,\r\n    SET_BLOCK_VALUE,\r\n    SET_GAME_SCALE,\r\n    SET_WINNER_CONDITION,\r\n    SET_WINNER,\r\n    SET_IS_SINGLE_PLAYER,\r\n    TOGGLE,\r\n    PLAYER_1,\r\n    DEFAULT_GAME_SCALE,\r\n    DEFAULT_WINNER_CONDITION,\r\n} from './constants';\r\n\r\nconst defaultIsWin = {\r\n    winner: '',\r\n    winCaseArr: [],\r\n    isGameFinished: false,\r\n};\r\n\r\nconst initialState = fromJS({\r\n    gameScale: DEFAULT_GAME_SCALE,\r\n    winnerCondition: DEFAULT_WINNER_CONDITION,\r\n    blocks: null,\r\n    currentRole: PLAYER_1,\r\n    isSinglePlayer: true,\r\n    isWin: defaultIsWin,\r\n});\r\n\r\nfunction tictactoeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case INIT: {\r\n            return setInit(state);\r\n        }\r\n\r\n        case SET_BLOCK_VALUE: {\r\n            const id = action.payload;\r\n            const currentRole = state.get('currentRole');\r\n            return state\r\n                .setIn(['blocks', id, 'owner'], currentRole)\r\n                .set('currentRole', currentRole * TOGGLE);\r\n        }\r\n\r\n        case SET_GAME_SCALE: {\r\n            const updatedState = state.set('gameScale', action.payload);\r\n            return setInit(updatedState);\r\n        }\r\n\r\n        case SET_WINNER_CONDITION: {\r\n            const updatedState = state.set('winnerCondition', action.payload);\r\n            return setInit(updatedState);\r\n        }\r\n\r\n        case SET_WINNER: {\r\n            return state.set('isWin', fromJS(action.payload));\r\n        }\r\n\r\n        case SET_IS_SINGLE_PLAYER: {\r\n            return state.updateIn(['isSinglePlayer'], (isSinglePlayer) => !isSinglePlayer);\r\n        }\r\n\r\n        default:\r\n            return setInit(initialState);\r\n    }\r\n}\r\n\r\nconst setInit = (state) => {\r\n    const isSinglePlayer = state.get('isSinglePlayer');\r\n    const gameScale = state.get('gameScale');\r\n    const winnerCondition = state.get('winnerCondition') > gameScale ?\r\n        DEFAULT_WINNER_CONDITION : state.get('winnerCondition');\r\n    const initBlocks = fromJS(\r\n        Array.from(new Array(gameScale * gameScale), (value, index) => ({\r\n            id: index,\r\n            owner: value,\r\n        })),\r\n    );\r\n    return state\r\n        .set('isSinglePlayer', isSinglePlayer)\r\n        .set('currentRole', PLAYER_1)\r\n        .set('blocks', initBlocks)\r\n        .set('isWin', fromJS(getWinner(initBlocks, gameScale, winnerCondition)))\r\n        .set('winnerCondition', winnerCondition);\r\n};\r\n\r\nexport default tictactoeReducer;\r\n","import {Observable} from 'rxjs/Rx';\r\nimport {getWinner, getBlockId} from './utils';\r\nimport {\r\n    SET_BLOCK_VALUE,\r\n    SET_WINNER,\r\n    SET_IS_SINGLE_PLAYER,\r\n    CROSS,\r\n} from './constants';\r\nimport {\r\n    setWinner,\r\n    setBlockValue,\r\n} from './actions';\r\n\r\nconst setIsWinEpic = (action$, store) =>\r\n    action$.ofType(SET_BLOCK_VALUE).switchMap(() => {\r\n        const tictactoeState = store.value.get('tictactoe');\r\n        const blocks = tictactoeState.get('blocks');\r\n        const winnerCondition = tictactoeState.get('winnerCondition');\r\n        const gameScale = tictactoeState.get('gameScale');\r\n        const isWin = getWinner(blocks, gameScale, winnerCondition);\r\n        return Observable.of(setWinner(isWin));\r\n    });\r\n\r\nconst setSinglePlayEpic = (action$, store) =>\r\n    action$\r\n        .ofType(SET_WINNER)\r\n        .debounceTime(300)\r\n        .switchMap(() => {\r\n            const tictactoeState = store.value.get('tictactoe');\r\n            if (\r\n                tictactoeState.get('isSinglePlayer') &&\r\n                tictactoeState.get('currentRole') === CROSS &&\r\n                !tictactoeState.getIn(['isWin', 'isGameFinished'])\r\n            ) {\r\n                const id = getBlockId(tictactoeState.get('blocks'));\r\n                const currentRole = CROSS;\r\n                return Observable.of(setBlockValue(id, currentRole));\r\n            }\r\n            return Observable.empty();\r\n        });\r\n\r\nconst setOnPlayModeToggle = (action$, store) =>\r\n    action$.ofType(SET_IS_SINGLE_PLAYER).switchMap(() => {\r\n        const tictactoeState = store.value.get('tictactoe');\r\n        const isWin = getWinner(tictactoeState.get('blocks'));\r\n        return Observable.of(setWinner(isWin));\r\n    });\r\n\r\nexport default [\r\n    setIsWinEpic,\r\n    setSinglePlayEpic,\r\n    setOnPlayModeToggle,\r\n];\r\n","import tictoctoeEpics from '../containers/TicTacToe/epics';\r\n\r\nexport default [...tictoctoeEpics];\r\n","import history from '../utils/history';\r\nimport configureStore from './configureStore';\r\n\r\nconst store = configureStore({}, history);\r\n\r\nexport default store;\r\n","import {fromJS} from 'immutable';\r\nimport {\r\n    createStore,\r\n    applyMiddleware,\r\n    compose\r\n} from 'redux';\r\nimport createReducer from './reducers';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {createEpicMiddleware, combineEpics} from 'redux-observable';\r\nimport initialEpics from './epics';\r\n\r\nexport default function configureStore(initialState = {}, history) {\r\n    const epic$ = new BehaviorSubject(combineEpics(...initialEpics));\r\n    const rootEpic = (action$, store, deps) =>\r\n        epic$.mergeMap(epic =>\r\n            epic(action$, store, deps).catch((err, source$) => {\r\n                setTimeout(() => {\r\n                    throw err;\r\n                }, 0);\r\n                return source$;\r\n            }),\r\n        );\r\n    const epicMiddleware = createEpicMiddleware();\r\n\r\n    const middlewares = [\r\n        epicMiddleware,\r\n    ];\r\n\r\n    const enhancers = [applyMiddleware(...middlewares)];\r\n\r\n    const composeEnhancers =\r\n        process.env.NODE_ENV !== 'production' &&\r\n        typeof window === 'object' &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n                shouldHotReload: false,\r\n            })\r\n            : compose;\r\n\r\n    const store = createStore(\r\n        createReducer(),\r\n        fromJS(initialState),\r\n        composeEnhancers(...enhancers)\r\n    );\r\n\r\n    epicMiddleware.run(rootEpic);\r\n\r\n    return store;\r\n}\r\n","import {combineReducers} from 'redux-immutable';\r\nimport tictactoeReducer from '../containers/TicTacToe/reducer';\r\n\r\nexport default function createReducer(injectedReducers) {\r\n    return combineReducers({\r\n        tictactoe: tictactoeReducer,\r\n    });\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}